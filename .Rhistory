vowel.test$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
set.seed(33833)
rfmodel <- train(y~., data=vowel.train, method="rf"))
rfmodel <- train(y~., data=vowel.train, method="rf")
gbmmodel <- train(y~., data=vowel.train, method="gbm")
rf.result <- predict(rfmodel, vowel.test)
gbm.result <- predict(gbmodel, vowel.test)
gbm.result <- predict(gbmmodel, vowel.test)
confusionMatrix(vowel.test$y, rf.result)$overall['Accuracy']
confusionMatrix(vowel.test$y)
confusionMatrix(vowel.test$y, rf.result)
library(caret)
library(glm)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
head(adData)
inTrain = createDataPartition(adData$diagnosis, p= 3/4)[[1]]
train = adData[inTrain, ]
test = adData[-inTrain,]
rfmodel <- train(diagnosis~., data=train, method="rf")
rfmodel <- train(diagnosis~., data=train, method="gbm")
rfmodel <- train(diagnosis~., data=train, method="ida")
rfmodel <- train(diagnosis~., data=train, method="lda")
rfresult <- predict(rfmodel, testing)
rfresult <- predict(rfmodel, tes)
rfresult <- predict(rfmodel, test)
gbmmodel <- predict(gbmmodel, test)
gbmmodel <- predict(gbmm, test)
gbmmodel <- predict(gbm, test)
ldaresult <- predict(ldamodel, test)
remove(SalesForceMaster)
dir()
read.csv("pml-testing.csv", header = TRUE, sep = ",")
test <- read.csv("pml-testing.csv", header = TRUE, sep = ",")
train <- read.csv("pml-training.csv", header = TRUE, sep = ",")
head(train)
summary(train)
head(train$classe)
classe
?train
rf_Model <- train(Classe~ ., data=train, method="rf", prox=TRUE)
library(randomForest)
?randomForest
rf_Model <- randomForest(Classe ~ ., data=train, prox=TRUE)
rf_Model <- train(classe~ ., data=train, method="rf", prox=TRUE)
rf_Model <- randomForest(classe~ ., data=train, method="rf", prox=TRUE)
library(caret)
modFit <- train(classe ~ ., method="rpart", data=training)
modFit <- train(classe ~ ., method="rpart", data=train)
library(caret)
rf_Model <- train(classe ~ ., data = train, method = "rf", prox = TRUE)
head(train)
dir()
train <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = TRUE)
head(train)
View(train)
?nearZeroVar
nzv_train <- nearZeroVar(train)
head(nzv_train)
nearZeroVar(train, saveMetrics = TRUE)
remove(nzv_train)
dir()
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
head(training)
View(training)
nearZeroVar(training)
testing <- read.csv("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
remove(test)
remove(train)
training$classe
testing$classe
table(training$classe)
View(training)
nearZeroVar <- nearZeroVar(training, saveMetrics=TRUE)
View(nearZeroVar)
head(nearZeroVar)
good = nearZeroVar$nzv == FALSE
head(good)
training[good,]
head(training[good, ])
a <- (training[good, ])
head(a)
View(a)
remove(a)
remove(good)
good <- nearZeroVar$nzv==FALSE
goodtraining <- training[,good]
head(goodtraining)
sum(nearZeroVar$nzv == "FALSE")
remove(goodtraining)
NearZeroVar <- NearZeroVar(training, saveMetrics=TRUE)
library(caret)
NearZeroVar <- NearZeroVar(training, saveMetrics=TRUE)
nearZeroVar(training, saveMetrics=TRUE)
good <- nearZeroVar$nzv==FALSE
training <- training{,good]
training <- training{ ,good]
training <- training[ ,good]
head(train)
View(training)
NearZeroVar <- NearZeroVar(training, saveMetrics=TRUE)
NearZeroVar <- nearZeroVar(training, saveMetrics=TRUE)
remove(NearZeroVar)
remove(nearZeroVar)
nearZeroVar <- nearZeroVar(training, saveMetrics=TRUE)
good <- nearZeroVar$nzv==FALSE
training <- training[,good]
dim(training)
str(training)
good
nearZeroVar
View(nearZeroVar)
str(training$user_name)
str(training$skewness_roll_belt)
range(training$pitch_belt)
range(training$stddev_roll_belt)
str(training)
range(training$var_accel_arm)
NA_train <- training[range(training$var_accel_arm == "NA NA", ]
NA_train <- training[range(training$var_accel_arm == "NA NA"), ]
View(NA_train)
remove(NA_train)
a <- range(training$var_roll_belt)
typeof(a)
a
str(a)
a <- as.data.frame(range(training$var_roll_belt))
a
View(a)
remove(a)
?subset.data.frame
df <- subset(training, range(1:nrow(training) == "NA NA"))
df <- subset(training, range(1:nrow(training) = "NA NA"))
df <- subset(training, range(1:ncol(training) == "NA NA"))
df <- subset(training, range(1:ncol(training) = NA NA))
df <- subset(training, range(1:ncol(training) == NA NA))
with(training, subset(1:nrow(training), range == NA NA))
summary(trainig)
summary(training)
head(training, 7)
head(training[, 1:7])
training <- training[, -c(1:7)]
head(training[, 1:7])
dir()
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
NearZeroVar <- nearZeroVar(training, saveMetrics=TRUE)
good <- nearZeroVar$nzv==FALSE
training <- training[,good]
nearZeroVar
nearZeroVar <- nearZeroVar(training, saveMetrics=TRUE)
good <- nearZeroVar$nzv==FALSE
training <- training[,good]
nearZeroVar
nearZeroVar <- nearZeroVar(training, saveMetrics = TRUE)
?nearZeroVar
remove(good)
remove(nearZeroVar)
library(caret)
training_nzv <- nearZeroVar(training, saveMetrics=TRUE)
good <- training_nzv$nzv==FALSE
training <- training[,good]
head(training, 1:8)
head(training[, 1:8])
range(training$roll_belt)
training <- training[, -c(1:6)]
head(training[, 1:8])
library(caret)
?nearZeroVar
training_nzv <- nearZeroVar(training, saveMetrics = TRUE)
good <- training_nzv$nzv==FALSE
training <- training[,good]
View(training_nzv)
remove(training)
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training_nzv <- nearZeroVar(training, saveMetrics = TRUE)
training_nzv
View(training_nzv)
range(training_nzv$nzv)
good
library(caret)
training_nzv <- nearZeroVar(training, saveMetrics = TRUE)
bad <- which(training_nzv$nzv==TRUE)
training <- training[, -bad]
remove(bad)
remove(good)
remove(training_nzv)
testing <- read.csv("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
View(training)
head(training, 1:7)
head(training[, 1:7])
head(testing[, 1:7])
range(training$num_window)
head(training[, 1:7])
training <- training[, -c(1:6)]
testing <- testing[, -c(1:6)]
nzv <- nearZeroVar(training, saveMetrics = TRUE)
bad <- which(nzv$nzv==FALSE)
bad
training = training[, bad]
remove(bad)
remove(nzv)
testing <- read.csv("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
nzv <- nearZeroVar(training,saveMetrics=TRUE)
View(nzv)
bad <- which(nzv$nzv==TRUE)
training <- training[, -bad]
nzv_test <- nearZeroVar(testing,saveMetrics=TRUE)
bad_test <- which(nzv_test$nzv==TRUE)
testing <- testing[, -bad_test]
which(colSums(training == 0))
which(colSums(training = 0))
remove(bad_test)
remove(nzv_test)
testing <- read.csv("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
zero <- which(colSums(training=0))
for (i in 1:length(training)){
if (sum(training[,i]) = 0)
training[,i]<-NULL
else
training[,i] <- training[,i]
for (i in 1:length(training)){
if (sum(training[,i]) = 0)
training[,i]<-NULL
else
training[,i]
training[, which(numcolwise(sum)(training) = 0)]
training[, colSums(training) != 0]
training[, colSums(is.na(training))==0]
training <- training[, colSums(is.na(training))==0]
summary(training)
View(training)
range(training$gyros_belt_x)
colnames(training)
head(training[, 1:6])
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
colnames(training)
training <- training[, -c(1:6]
training <- training[, -c(1:6)]
colnames(training)
training <- training[, colSums(is.na(training))!==0]
training <- training[, colSums(is.na(training))!=0]
head(training)
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
summary(training)
dim(training)
dim(training, testing)
dim(training)
dim(testing)
as.data.frame(dim(training), dim(testing))
dim(training), dim(testing)
c(dim(training), dim(testing))
training <- training[, -c(1:6)]
library(caret)
nzv <- nearZeroVar(training,saveMetrics=TRUE)
bad <- which(nzv$nzv==TRUE)
training <- training[, -bad]
training <- training[, colSums(is.na(training))!=0]
colnames(training)
head(training)
View(training)
range(training$kurtosis_roll_belt)
summary(training)
sum(training$skewness_roll_belt)
sum(training$var_accel_forearm)
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- training[, -c(1:6)]
library(caret)
nzv <- nearZeroVar(training,saveMetrics=TRUE)
bad <- which(nzv$nzv==TRUE)
training <- training[, -bad]
range(training$pitch_belt)
range(training$kurtosis_roll_belt)
type(training$kurtosis_roll_belt)
str(training$kurtosis_roll_belt)
range(training)
for i in 1:nrow(training){
if range(training[,i])=NA <- NULL
else
training[, i] <- training[,i]
}
for i in 1:ncol(training){
if range(training[, i])=NA <- NULL
else
training[, i] <- training[,i]
}
training <- subset(training, ! (range(training$num_window:training$classe)=NA)
)
range(training$var_roll_dumbbell)
NA <- which([, range(training)=NA))
NA <- which([, range(training)=NA]))
NA <- which[, range(training)=NA]
NA <- which[, range(training)==NA]
colSums(training$max_roll_belt)
NA <- which[, sapply(training, is.numeric)
)
NA <- which[, sapply(training, is.numeric)]
NA <- which(sapply(training, is.numeric)
)
training <- training[, range(is.na(training))=="NA NA"]
head(training)
remove(training)
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- training[, -c(1:6)]
library(caret)
nzv <- nearZeroVar(training,saveMetrics=TRUE)
bad <- which(nzv$nzv==TRUE)
training <- training[, -bad]
training <- training[,colSums(training)) == 0]
training <- training[,colSums(training) == 0]
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- training[, colSums(is.na(training))==0]
library(caret)
nzv <- nearZeroVar(training,saveMetrics=TRUE)
bad <- which(nzv$nzv==TRUE)
training <- training[, -bad]
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
View(training)
library(caret)
nzv <- nearZeroVar(training,saveMetrics=TRUE)
bad <- which(nzv$nzv==TRUE)
training <- training[, -bad]
training <- training[, -c(1:6)]
training <- training[, colSums(is.na(training))==0]
View(training)
?is.na
length(training)
for i in 1:length(training){
if colSums(training[, i])=NA <- NULL
else
training[, i] <- training[,i]
}
for (i in 1:length(training)){
if (colSums(training[, i])=0 <- NULL)
else
training[, i] <- training[,i]
}
training <- training[,-which(colSums(training) == 0)]
training = training[, colSums(training) != 0]
training <- training[, colSums(is.na(training)) > 0]
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
colnames(training) = colnames(testing)
colnames(training) == colnames(testing)
testing <- read.csv("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
colnames(training) == colnames(testing)
colnames(testing[, 160])
tail(testing[, 160])
colnames(testing)
colnames(testing, 1:10)
?colnames
colnames(testing)[[160]]
colnames(training)[[160]]
head(testing$problem_id)
View(testing)
training <- training[, -c(1:6)]
library(caret)
nzv <- nearZeroVar(training,saveMetrics=TRUE)
bad <- which(nzv$nzv==TRUE)
training <- training[, -bad]
training <- training[, colSums(!is.na(training)) > 0]
training <- training[colSums(!is.na(training)) > 0]
training[, !apply(is.na(training), 2, all)]
training <- training[, !apply(is.na(training), 2, all)]
training[, colSums(is.na(training)) !=nrow(training)]
training <- training[, colSums(is.na(training)) !=nrow(training)]
training <- training[colSums(!is.na(training)) > 0]
training <- training[,colSums(is.na(training)),nrow(training)]
training <- training[, !apply(is.na(training), 2, all)]
training <- training[, colSums(is.na(training)) == 0]
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- training[, -which(apply(training, 2, function(training)all(is.na(training))))]
View(training)
training <- training[, -which(apply(training, 2, function(training)all, colSums(is.na(training))==0))]
training <- training[, -which(apply(training, 2, function(training)all(is.na(training))))]
?apply
remove(training)
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
for (i in 1:length(training)){
if (colSums(is.na(training)) == 0) <- training[, i]
else
training[, i] <- NULL
}
for (i in 1:length(training)){
if (colSums(is.na(training)) == 0) <- training[, i]
else
training[, i] <- NULL
}
for (i in 1:length(training)) {
if (colSums(is.na(training)) == 0) <- training[, i]
else
training[, i] <- NULL
}
for (i in 1:160) {
if (colSums(is.na(training)) == 0) <- training[, i]
else
training[, i] <- NULL
}
for (i in 1:160) {
if (colSums(is.na(training)) == 0) <- training[, i]
else
training[, i] <- NULL
}
training <- training[, ! apply(training, 2, function(training) all(is.na(training))))]
training <- training[, ! apply(training, 2, function(training) all(is.na(training)))]
View(training)
training <- training[, ! apply(training, 2, function(training) colSums(is.na(training) == 0))]
training <- training[,  apply(training, 2, function(training) colSums(is.na(training) == 0))]
training <- training[, ! apply(training, 2, function(training) colSums(is.na(training) == 0))]
training=apply(training,2,function(training)!any(is.na(training)))
training
training[, training]
cok=apply(training,2,function(training)!any(is.na(training)))
testing <- read.csv("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
cok=apply(training,2,function(training)!any(is.na(training)))
training <- training[colSums(is.na(training) ==0,)]
training <- training[, colSums(is.na(training) ==0,)]
training <- training[, colSums(is.na(training)) ==0]
training <- training[, colSums(is.na(training)) == 0]
training <- training[,colSums(is.na(training)) == 0]
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- training[,colSums(is.na(training)) == 0]
bad <- which(nzv$nzv==TRUE | nzv$zeroVar==TRUE)
bad
View(nzv)
bad <- which(nzv$nzv==TRUE) | which(nzv$zeroVar==TRUE)
bad <- which(nzv$nzv==TRUE)
colnames(training)
range(training$new_window)
training$new_window
levels(training$new_window)
levels(training$num_window)
range(training$num_window)
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- training[, -c(1:7)]
library(caret)
nzv <- nearZeroVar(training,saveMetrics=TRUE)
bad <- which(nzv$nzv==TRUE)
training <- training[, -bad]
colSums(is.na(training))
count(colSums(is.na(training)))
sum(colSums(is.na(training)))
NA <- colSums(is.na(training))
sum[,colSums(is.na(training))]
colSums(is.na(training) == 0)
a=colSums(is.na(training) == 0)
remove(a)
a = training[, colSums(is.na(training)) == 0]
sum(training[, colSums(is.na(training)) == 0])
a[[, ]]
ncol(a)
na = training[, colSums(is.na(training)) == 0]
ncol(na)
testing <- read.csv("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
training <- read.csv("pml-training.csv", header = TRUE, sep = ",", na.strings = c("", "NA", "#DIV/0!"))
head(testing[, 1:7])
testing[, 1:7] == training[, 1:7]
testing[, 1:7] = training[, 1:7]
testing[, 1:7]
training[,1:7]
training[, 1:7]
head(testing[, 1:7])
head(training[,1:7])
training <- training[, -c(1:7)]
testing <- testing[, -c(1:7)]
library(caret)
nzv <- nearZeroVar(training,saveMetrics=TRUE)
bad <- which(nzv$nzv==TRUE)
training <- training[, -bad]
nzv_test <- nearZeroVar(testing,saveMetrics=TRUE)
bad_test <- which(nzv_test$nzv==TRUE)
testing <- testing[, -bad_test]
na = training[, colSums(is.na(training)) == 0]
ncol(na)
training <- training[, colSums(is.na(training)) == 0]
testing <- testing[, colSums(is.na(testing)) == 0]
gbm <- train(classe ~ ., method="gbm", data=training_set, verbose=F)
?train
library(caret)
gbm <- train(classe ~ ., method="gbm", data=training_set, verbose=F)
inTrain <- createDataPartition(y=training$classe, p=.75, list=FALSE)
training_set <- training[inTrain,]
testing_set <- training[-inTrain,]
library(gbm)
?gbm
gbm <- gbm(classe ~ ., data = training_set, verbose = FALSE, keep.data = TRUE)
print(gbm)
Prediction_gbm <- predict(gbm, testing_set)
gbm = gbm(classe ~ ., data = training_set, verbose = FALSE, keep.data = TRUE)
Prediction2 <- predict(gbm, testing_set)
Prediction2 <- predict(gbm, newdata = testing_set)
gbm$n.trees
Prediction2 <- predict(gbm, newdata = testing_set, n.trees = 100)
confusionMatrix(Prediction2, testing_set$classe)
table(factor(Prediction2, levels = min(testing_set):max(testing_set), factor(testing_set, levels = min(testing_set):max(testing_set)))
)
confusionMatrix(testing_set$classe, predict(gbm, Prediction2))
confusionMatrix(testing_set$classe, predict(gbm, Prediction2, n.trees = 100))
?confusionMatrix
confusionMatrix(Prediction2, testing_set$classe)
fit=randomForest(classe ~ ., data=training_set)
require(randomForest)
fit=randomForest(classe ~ ., data=training_set)
varImpPlot(fit, type=2)
Prediction <- predict(fit, testing_set)
confusionMatrix(Prediction, testing_set$classe)
